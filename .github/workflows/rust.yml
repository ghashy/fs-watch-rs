name: Build
on:
  repository_dispatch:
    types: [manual-build]
env:
  # The project name specified in your Cargo.toml
  PROJECT_NAME: fs_watch_rs
jobs:
  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}
 
    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
 
    # The steps to run for each matrix item
    steps:
      - name: Checkout
        uses: actions/checkout@v3
 
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
 
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
 
      - name: Build Library
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}
 
      - name: Release Library
        shell: bash
        run: |
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".dll"
          fi
          if [[ "${{ matrix.runner }}" == "ubuntu-latest" ]]; then
            BIN_SUFFIX=".so"
          fi
          if [[ "${{ matrix.runner }}" == "macos-latest" ]]; then
            BIN_SUFFIX=".dylib"
          fi
 
          # The built binary output location
          LIB_OUTPUT="target/${{ matrix.target }}/release/lib${PROJECT_NAME}${BIN_SUFFIX}"
 
          # Define a better name for the final binary
          LIB_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          LIB_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"
 
          mkdir libs
          mv "${LIB_OUTPUT}" "./libs/${BIN_RELEASE}"
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./libs/${LIB_RELEASE}
            ./libs/${LIB_RELEASE_VERSIONED}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
